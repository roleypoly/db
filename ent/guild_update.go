// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/roleypoly/db/ent/guild"
	"github.com/roleypoly/db/ent/predicate"
	"github.com/roleypoly/db/ent/schema"
)

// GuildUpdate is the builder for updating Guild entities.
type GuildUpdate struct {
	config
	hooks      []Hook
	mutation   *GuildMutation
	predicates []predicate.Guild
}

// Where adds a new predicate for the builder.
func (gu *GuildUpdate) Where(ps ...predicate.Guild) *GuildUpdate {
	gu.predicates = append(gu.predicates, ps...)
	return gu
}

// SetUpdatedAt sets the updated_at field.
func (gu *GuildUpdate) SetUpdatedAt(t time.Time) *GuildUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetMessage sets the message field.
func (gu *GuildUpdate) SetMessage(s string) *GuildUpdate {
	gu.mutation.SetMessage(s)
	return gu
}

// SetCategories sets the categories field.
func (gu *GuildUpdate) SetCategories(s []schema.Category) *GuildUpdate {
	gu.mutation.SetCategories(s)
	return gu
}

// SetEntitlements sets the entitlements field.
func (gu *GuildUpdate) SetEntitlements(s []string) *GuildUpdate {
	gu.mutation.SetEntitlements(s)
	return gu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (gu *GuildUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		v := guild.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
	var (
		err      error
		affected int
	)
	if len(gu.hooks) == 0 {
		affected, err = gu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			gu.mutation = mutation
			affected, err = gu.sqlSave(ctx)
			return affected, err
		})
		for i := len(gu.hooks) - 1; i >= 0; i-- {
			mut = gu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, gu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GuildUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GuildUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GuildUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gu *GuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guild.Table,
			Columns: guild.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guild.FieldID,
			},
		},
	}
	if ps := gu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guild.FieldUpdatedAt,
		})
	}
	if value, ok := gu.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldMessage,
		})
	}
	if value, ok := gu.mutation.Categories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: guild.FieldCategories,
		})
	}
	if value, ok := gu.mutation.Entitlements(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: guild.FieldEntitlements,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guild.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// GuildUpdateOne is the builder for updating a single Guild entity.
type GuildUpdateOne struct {
	config
	hooks    []Hook
	mutation *GuildMutation
}

// SetUpdatedAt sets the updated_at field.
func (guo *GuildUpdateOne) SetUpdatedAt(t time.Time) *GuildUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetMessage sets the message field.
func (guo *GuildUpdateOne) SetMessage(s string) *GuildUpdateOne {
	guo.mutation.SetMessage(s)
	return guo
}

// SetCategories sets the categories field.
func (guo *GuildUpdateOne) SetCategories(s []schema.Category) *GuildUpdateOne {
	guo.mutation.SetCategories(s)
	return guo
}

// SetEntitlements sets the entitlements field.
func (guo *GuildUpdateOne) SetEntitlements(s []string) *GuildUpdateOne {
	guo.mutation.SetEntitlements(s)
	return guo
}

// Save executes the query and returns the updated entity.
func (guo *GuildUpdateOne) Save(ctx context.Context) (*Guild, error) {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		v := guild.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
	var (
		err  error
		node *Guild
	)
	if len(guo.hooks) == 0 {
		node, err = guo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*GuildMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			guo.mutation = mutation
			node, err = guo.sqlSave(ctx)
			return node, err
		})
		for i := len(guo.hooks) - 1; i >= 0; i-- {
			mut = guo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, guo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GuildUpdateOne) SaveX(ctx context.Context) *Guild {
	gu, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return gu
}

// Exec executes the query on the entity.
func (guo *GuildUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GuildUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (guo *GuildUpdateOne) sqlSave(ctx context.Context) (gu *Guild, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   guild.Table,
			Columns: guild.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: guild.FieldID,
			},
		},
	}
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Guild.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: guild.FieldUpdatedAt,
		})
	}
	if value, ok := guo.mutation.Message(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: guild.FieldMessage,
		})
	}
	if value, ok := guo.mutation.Categories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: guild.FieldCategories,
		})
	}
	if value, ok := guo.mutation.Entitlements(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: guild.FieldEntitlements,
		})
	}
	gu = &Guild{config: guo.config}
	_spec.Assign = gu.assignValues
	_spec.ScanValues = gu.scanValues()
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guild.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return gu, nil
}
