// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/roleypoly/db/ent/session"
)

// SessionCreate is the builder for creating a Session entity.
type SessionCreate struct {
	config
	created_at *time.Time
	updated_at *time.Time
	session_id *string
	user_id    *string
	source     *session.Source
	expires_at *time.Time
}

// SetCreatedAt sets the created_at field.
func (sc *SessionCreate) SetCreatedAt(t time.Time) *SessionCreate {
	sc.created_at = &t
	return sc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (sc *SessionCreate) SetNillableCreatedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the updated_at field.
func (sc *SessionCreate) SetUpdatedAt(t time.Time) *SessionCreate {
	sc.updated_at = &t
	return sc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (sc *SessionCreate) SetNillableUpdatedAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetSessionID sets the session_id field.
func (sc *SessionCreate) SetSessionID(s string) *SessionCreate {
	sc.session_id = &s
	return sc
}

// SetUserID sets the user_id field.
func (sc *SessionCreate) SetUserID(s string) *SessionCreate {
	sc.user_id = &s
	return sc
}

// SetSource sets the source field.
func (sc *SessionCreate) SetSource(s session.Source) *SessionCreate {
	sc.source = &s
	return sc
}

// SetExpiresAt sets the expires_at field.
func (sc *SessionCreate) SetExpiresAt(t time.Time) *SessionCreate {
	sc.expires_at = &t
	return sc
}

// SetNillableExpiresAt sets the expires_at field if the given value is not nil.
func (sc *SessionCreate) SetNillableExpiresAt(t *time.Time) *SessionCreate {
	if t != nil {
		sc.SetExpiresAt(*t)
	}
	return sc
}

// Save creates the Session in the database.
func (sc *SessionCreate) Save(ctx context.Context) (*Session, error) {
	if sc.created_at == nil {
		v := session.DefaultCreatedAt()
		sc.created_at = &v
	}
	if sc.updated_at == nil {
		v := session.DefaultUpdatedAt()
		sc.updated_at = &v
	}
	if sc.session_id == nil {
		return nil, errors.New("ent: missing required field \"session_id\"")
	}
	if sc.user_id == nil {
		return nil, errors.New("ent: missing required field \"user_id\"")
	}
	if sc.source == nil {
		return nil, errors.New("ent: missing required field \"source\"")
	}
	if err := session.SourceValidator(*sc.source); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"source\": %v", err)
	}
	if sc.expires_at == nil {
		v := session.DefaultExpiresAt()
		sc.expires_at = &v
	}
	return sc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SessionCreate) SaveX(ctx context.Context) *Session {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SessionCreate) sqlSave(ctx context.Context) (*Session, error) {
	var (
		builder = sql.Dialect(sc.driver.Dialect())
		s       = &Session{config: sc.config}
	)
	tx, err := sc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(session.Table).Default()
	if value := sc.created_at; value != nil {
		insert.Set(session.FieldCreatedAt, *value)
		s.CreatedAt = *value
	}
	if value := sc.updated_at; value != nil {
		insert.Set(session.FieldUpdatedAt, *value)
		s.UpdatedAt = *value
	}
	if value := sc.session_id; value != nil {
		insert.Set(session.FieldSessionID, *value)
		s.SessionID = *value
	}
	if value := sc.user_id; value != nil {
		insert.Set(session.FieldUserID, *value)
		s.UserID = *value
	}
	if value := sc.source; value != nil {
		insert.Set(session.FieldSource, *value)
		s.Source = *value
	}
	if value := sc.expires_at; value != nil {
		insert.Set(session.FieldExpiresAt, *value)
		s.ExpiresAt = *value
	}

	id, err := insertLastID(ctx, tx, insert.Returning(session.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	s.ID = int(id)
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return s, nil
}
