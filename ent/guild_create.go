// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/roleypoly/db/ent/guild"
	"github.com/roleypoly/db/ent/schema"
)

// GuildCreate is the builder for creating a Guild entity.
type GuildCreate struct {
	config
	snowflake  *string
	message    *string
	categories *[]schema.Category
}

// SetSnowflake sets the snowflake field.
func (gc *GuildCreate) SetSnowflake(s string) *GuildCreate {
	gc.snowflake = &s
	return gc
}

// SetMessage sets the message field.
func (gc *GuildCreate) SetMessage(s string) *GuildCreate {
	gc.message = &s
	return gc
}

// SetCategories sets the categories field.
func (gc *GuildCreate) SetCategories(s []schema.Category) *GuildCreate {
	gc.categories = &s
	return gc
}

// Save creates the Guild in the database.
func (gc *GuildCreate) Save(ctx context.Context) (*Guild, error) {
	if gc.snowflake == nil {
		return nil, errors.New("ent: missing required field \"snowflake\"")
	}
	if gc.message == nil {
		return nil, errors.New("ent: missing required field \"message\"")
	}
	if gc.categories == nil {
		return nil, errors.New("ent: missing required field \"categories\"")
	}
	return gc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GuildCreate) SaveX(ctx context.Context) *Guild {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (gc *GuildCreate) sqlSave(ctx context.Context) (*Guild, error) {
	var (
		builder = sql.Dialect(gc.driver.Dialect())
		gu      = &Guild{config: gc.config}
	)
	tx, err := gc.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	insert := builder.Insert(guild.Table).Default()
	if value := gc.snowflake; value != nil {
		insert.Set(guild.FieldSnowflake, *value)
		gu.Snowflake = *value
	}
	if value := gc.message; value != nil {
		insert.Set(guild.FieldMessage, *value)
		gu.Message = *value
	}
	if value := gc.categories; value != nil {
		buf, err := json.Marshal(*value)
		if err != nil {
			return nil, err
		}
		insert.Set(guild.FieldCategories, buf)
		gu.Categories = *value
	}

	id, err := insertLastID(ctx, tx, insert.Returning(guild.FieldID))
	if err != nil {
		return nil, rollback(tx, err)
	}
	gu.ID = int(id)
	if err := tx.Commit(); err != nil {
		return nil, err
	}
	return gu, nil
}
