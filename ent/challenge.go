// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/roleypoly/db/ent/challenge"
)

// Challenge is the model entity for the Challenge schema.
type Challenge struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ChallengeID holds the value of the "Challenge_id" field.
	ChallengeID string `json:"Challenge_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Source holds the value of the "source" field.
	Source challenge.Source `json:"source,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
}

// FromRows scans the sql response data into Challenge.
func (c *Challenge) FromRows(rows *sql.Rows) error {
	var scanc struct {
		ID          int
		CreatedAt   sql.NullTime
		UpdatedAt   sql.NullTime
		ChallengeID sql.NullString
		UserID      sql.NullString
		Source      sql.NullString
		ExpiresAt   sql.NullTime
	}
	// the order here should be the same as in the `challenge.Columns`.
	if err := rows.Scan(
		&scanc.ID,
		&scanc.CreatedAt,
		&scanc.UpdatedAt,
		&scanc.ChallengeID,
		&scanc.UserID,
		&scanc.Source,
		&scanc.ExpiresAt,
	); err != nil {
		return err
	}
	c.ID = scanc.ID
	c.CreatedAt = scanc.CreatedAt.Time
	c.UpdatedAt = scanc.UpdatedAt.Time
	c.ChallengeID = scanc.ChallengeID.String
	c.UserID = scanc.UserID.String
	c.Source = challenge.Source(scanc.Source.String)
	c.ExpiresAt = scanc.ExpiresAt.Time
	return nil
}

// Update returns a builder for updating this Challenge.
// Note that, you need to call Challenge.Unwrap() before calling this method, if this Challenge
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Challenge) Update() *ChallengeUpdateOne {
	return (&ChallengeClient{c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Challenge) Unwrap() *Challenge {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Challenge is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Challenge) String() string {
	var builder strings.Builder
	builder.WriteString("Challenge(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", Challenge_id=")
	builder.WriteString(c.ChallengeID)
	builder.WriteString(", user_id=")
	builder.WriteString(c.UserID)
	builder.WriteString(", source=")
	builder.WriteString(fmt.Sprintf("%v", c.Source))
	builder.WriteString(", expires_at=")
	builder.WriteString(c.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Challenges is a parsable slice of Challenge.
type Challenges []*Challenge

// FromRows scans the sql response data into Challenges.
func (c *Challenges) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		scanc := &Challenge{}
		if err := scanc.FromRows(rows); err != nil {
			return err
		}
		*c = append(*c, scanc)
	}
	return nil
}

func (c Challenges) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
