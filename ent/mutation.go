// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"time"

	"github.com/roleypoly/db/ent/challenge"
	"github.com/roleypoly/db/ent/guild"
	"github.com/roleypoly/db/ent/schema"
	"github.com/roleypoly/db/ent/session"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChallenge = "Challenge"
	TypeGuild     = "Guild"
	TypeSession   = "Session"
)

// ChallengeMutation represents an operation that mutate the Challenges
// nodes in the graph.
type ChallengeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	challenge_id  *string
	user_id       *string
	human         *string
	magic         *string
	expires_at    *time.Time
	clearedFields map[string]struct{}
}

var _ ent.Mutation = (*ChallengeMutation)(nil)

// newChallengeMutation creates new mutation for $n.Name.
func newChallengeMutation(c config, op Op) *ChallengeMutation {
	return &ChallengeMutation{
		config:        c,
		op:            op,
		typ:           TypeChallenge,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChallengeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChallengeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ChallengeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the created_at field.
func (m *ChallengeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *ChallengeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the created_at field.
func (m *ChallengeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *ChallengeMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *ChallengeMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updated_at field.
func (m *ChallengeMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetChallengeID sets the challenge_id field.
func (m *ChallengeMutation) SetChallengeID(s string) {
	m.challenge_id = &s
}

// ChallengeID returns the challenge_id value in the mutation.
func (m *ChallengeMutation) ChallengeID() (r string, exists bool) {
	v := m.challenge_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetChallengeID reset all changes of the challenge_id field.
func (m *ChallengeMutation) ResetChallengeID() {
	m.challenge_id = nil
}

// SetUserID sets the user_id field.
func (m *ChallengeMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the user_id value in the mutation.
func (m *ChallengeMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID reset all changes of the user_id field.
func (m *ChallengeMutation) ResetUserID() {
	m.user_id = nil
}

// SetHuman sets the human field.
func (m *ChallengeMutation) SetHuman(s string) {
	m.human = &s
}

// Human returns the human value in the mutation.
func (m *ChallengeMutation) Human() (r string, exists bool) {
	v := m.human
	if v == nil {
		return
	}
	return *v, true
}

// ResetHuman reset all changes of the human field.
func (m *ChallengeMutation) ResetHuman() {
	m.human = nil
}

// SetMagic sets the magic field.
func (m *ChallengeMutation) SetMagic(s string) {
	m.magic = &s
}

// Magic returns the magic value in the mutation.
func (m *ChallengeMutation) Magic() (r string, exists bool) {
	v := m.magic
	if v == nil {
		return
	}
	return *v, true
}

// ResetMagic reset all changes of the magic field.
func (m *ChallengeMutation) ResetMagic() {
	m.magic = nil
}

// SetExpiresAt sets the expires_at field.
func (m *ChallengeMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the expires_at value in the mutation.
func (m *ChallengeMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiresAt reset all changes of the expires_at field.
func (m *ChallengeMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// Op returns the operation name.
func (m *ChallengeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Challenge).
func (m *ChallengeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ChallengeMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.created_at != nil {
		fields = append(fields, challenge.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, challenge.FieldUpdatedAt)
	}
	if m.challenge_id != nil {
		fields = append(fields, challenge.FieldChallengeID)
	}
	if m.user_id != nil {
		fields = append(fields, challenge.FieldUserID)
	}
	if m.human != nil {
		fields = append(fields, challenge.FieldHuman)
	}
	if m.magic != nil {
		fields = append(fields, challenge.FieldMagic)
	}
	if m.expires_at != nil {
		fields = append(fields, challenge.FieldExpiresAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ChallengeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case challenge.FieldCreatedAt:
		return m.CreatedAt()
	case challenge.FieldUpdatedAt:
		return m.UpdatedAt()
	case challenge.FieldChallengeID:
		return m.ChallengeID()
	case challenge.FieldUserID:
		return m.UserID()
	case challenge.FieldHuman:
		return m.Human()
	case challenge.FieldMagic:
		return m.Magic()
	case challenge.FieldExpiresAt:
		return m.ExpiresAt()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ChallengeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case challenge.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case challenge.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case challenge.FieldChallengeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChallengeID(v)
		return nil
	case challenge.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case challenge.FieldHuman:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHuman(v)
		return nil
	case challenge.FieldMagic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMagic(v)
		return nil
	case challenge.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	}
	return fmt.Errorf("unknown Challenge field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ChallengeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ChallengeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ChallengeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Challenge numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ChallengeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ChallengeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChallengeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Challenge nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ChallengeMutation) ResetField(name string) error {
	switch name {
	case challenge.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case challenge.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case challenge.FieldChallengeID:
		m.ResetChallengeID()
		return nil
	case challenge.FieldUserID:
		m.ResetUserID()
		return nil
	case challenge.FieldHuman:
		m.ResetHuman()
		return nil
	case challenge.FieldMagic:
		m.ResetMagic()
		return nil
	case challenge.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	}
	return fmt.Errorf("unknown Challenge field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ChallengeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ChallengeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ChallengeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ChallengeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ChallengeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ChallengeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ChallengeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Challenge unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ChallengeMutation) ResetEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Challenge edge %s", name)
}

// GuildMutation represents an operation that mutate the Guilds
// nodes in the graph.
type GuildMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	snowflake     *string
	message       *string
	categories    *[]schema.Category
	entitlements  *[]string
	clearedFields map[string]struct{}
}

var _ ent.Mutation = (*GuildMutation)(nil)

// newGuildMutation creates new mutation for $n.Name.
func newGuildMutation(c config, op Op) *GuildMutation {
	return &GuildMutation{
		config:        c,
		op:            op,
		typ:           TypeGuild,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GuildMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GuildMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GuildMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the created_at field.
func (m *GuildMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *GuildMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the created_at field.
func (m *GuildMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *GuildMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *GuildMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updated_at field.
func (m *GuildMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSnowflake sets the snowflake field.
func (m *GuildMutation) SetSnowflake(s string) {
	m.snowflake = &s
}

// Snowflake returns the snowflake value in the mutation.
func (m *GuildMutation) Snowflake() (r string, exists bool) {
	v := m.snowflake
	if v == nil {
		return
	}
	return *v, true
}

// ResetSnowflake reset all changes of the snowflake field.
func (m *GuildMutation) ResetSnowflake() {
	m.snowflake = nil
}

// SetMessage sets the message field.
func (m *GuildMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the message value in the mutation.
func (m *GuildMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// ResetMessage reset all changes of the message field.
func (m *GuildMutation) ResetMessage() {
	m.message = nil
}

// SetCategories sets the categories field.
func (m *GuildMutation) SetCategories(s []schema.Category) {
	m.categories = &s
}

// Categories returns the categories value in the mutation.
func (m *GuildMutation) Categories() (r []schema.Category, exists bool) {
	v := m.categories
	if v == nil {
		return
	}
	return *v, true
}

// ResetCategories reset all changes of the categories field.
func (m *GuildMutation) ResetCategories() {
	m.categories = nil
}

// SetEntitlements sets the entitlements field.
func (m *GuildMutation) SetEntitlements(s []string) {
	m.entitlements = &s
}

// Entitlements returns the entitlements value in the mutation.
func (m *GuildMutation) Entitlements() (r []string, exists bool) {
	v := m.entitlements
	if v == nil {
		return
	}
	return *v, true
}

// ResetEntitlements reset all changes of the entitlements field.
func (m *GuildMutation) ResetEntitlements() {
	m.entitlements = nil
}

// Op returns the operation name.
func (m *GuildMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Guild).
func (m *GuildMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GuildMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, guild.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, guild.FieldUpdatedAt)
	}
	if m.snowflake != nil {
		fields = append(fields, guild.FieldSnowflake)
	}
	if m.message != nil {
		fields = append(fields, guild.FieldMessage)
	}
	if m.categories != nil {
		fields = append(fields, guild.FieldCategories)
	}
	if m.entitlements != nil {
		fields = append(fields, guild.FieldEntitlements)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GuildMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case guild.FieldCreatedAt:
		return m.CreatedAt()
	case guild.FieldUpdatedAt:
		return m.UpdatedAt()
	case guild.FieldSnowflake:
		return m.Snowflake()
	case guild.FieldMessage:
		return m.Message()
	case guild.FieldCategories:
		return m.Categories()
	case guild.FieldEntitlements:
		return m.Entitlements()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GuildMutation) SetField(name string, value ent.Value) error {
	switch name {
	case guild.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case guild.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case guild.FieldSnowflake:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnowflake(v)
		return nil
	case guild.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case guild.FieldCategories:
		v, ok := value.([]schema.Category)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategories(v)
		return nil
	case guild.FieldEntitlements:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEntitlements(v)
		return nil
	}
	return fmt.Errorf("unknown Guild field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GuildMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GuildMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GuildMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Guild numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GuildMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GuildMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GuildMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Guild nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GuildMutation) ResetField(name string) error {
	switch name {
	case guild.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case guild.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case guild.FieldSnowflake:
		m.ResetSnowflake()
		return nil
	case guild.FieldMessage:
		m.ResetMessage()
		return nil
	case guild.FieldCategories:
		m.ResetCategories()
		return nil
	case guild.FieldEntitlements:
		m.ResetEntitlements()
		return nil
	}
	return fmt.Errorf("unknown Guild field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GuildMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GuildMutation) AddedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GuildMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GuildMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GuildMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GuildMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GuildMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Guild unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GuildMutation) ResetEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Guild edge %s", name)
}

// SessionMutation represents an operation that mutate the Sessions
// nodes in the graph.
type SessionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	session_id    *string
	user_id       *string
	source        *session.Source
	expires_at    *time.Time
	clearedFields map[string]struct{}
}

var _ ent.Mutation = (*SessionMutation)(nil)

// newSessionMutation creates new mutation for $n.Name.
func newSessionMutation(c config, op Op) *SessionMutation {
	return &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the created_at field.
func (m *SessionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *SessionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the created_at field.
func (m *SessionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *SessionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *SessionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updated_at field.
func (m *SessionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetSessionID sets the session_id field.
func (m *SessionMutation) SetSessionID(s string) {
	m.session_id = &s
}

// SessionID returns the session_id value in the mutation.
func (m *SessionMutation) SessionID() (r string, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSessionID reset all changes of the session_id field.
func (m *SessionMutation) ResetSessionID() {
	m.session_id = nil
}

// SetUserID sets the user_id field.
func (m *SessionMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the user_id value in the mutation.
func (m *SessionMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID reset all changes of the user_id field.
func (m *SessionMutation) ResetUserID() {
	m.user_id = nil
}

// SetSource sets the source field.
func (m *SessionMutation) SetSource(s session.Source) {
	m.source = &s
}

// Source returns the source value in the mutation.
func (m *SessionMutation) Source() (r session.Source, exists bool) {
	v := m.source
	if v == nil {
		return
	}
	return *v, true
}

// ResetSource reset all changes of the source field.
func (m *SessionMutation) ResetSource() {
	m.source = nil
}

// SetExpiresAt sets the expires_at field.
func (m *SessionMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the expires_at value in the mutation.
func (m *SessionMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetExpiresAt reset all changes of the expires_at field.
func (m *SessionMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, session.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, session.FieldUpdatedAt)
	}
	if m.session_id != nil {
		fields = append(fields, session.FieldSessionID)
	}
	if m.user_id != nil {
		fields = append(fields, session.FieldUserID)
	}
	if m.source != nil {
		fields = append(fields, session.FieldSource)
	}
	if m.expires_at != nil {
		fields = append(fields, session.FieldExpiresAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldCreatedAt:
		return m.CreatedAt()
	case session.FieldUpdatedAt:
		return m.UpdatedAt()
	case session.FieldSessionID:
		return m.SessionID()
	case session.FieldUserID:
		return m.UserID()
	case session.FieldSource:
		return m.Source()
	case session.FieldExpiresAt:
		return m.ExpiresAt()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case session.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case session.FieldSessionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case session.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case session.FieldSource:
		v, ok := value.(session.Source)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSource(v)
		return nil
	case session.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case session.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case session.FieldSessionID:
		m.ResetSessionID()
		return nil
	case session.FieldUserID:
		m.ResetUserID()
		return nil
	case session.FieldSource:
		m.ResetSource()
		return nil
	case session.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Session edge %s", name)
}
