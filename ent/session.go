// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/roleypoly/db/ent/session"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// SessionID holds the value of the "session_id" field.
	SessionID string `json:"session_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Source holds the value of the "source" field.
	Source session.Source `json:"source,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
}

// FromRows scans the sql response data into Session.
func (s *Session) FromRows(rows *sql.Rows) error {
	var scans struct {
		ID        int
		CreatedAt sql.NullTime
		UpdatedAt sql.NullTime
		SessionID sql.NullString
		UserID    sql.NullString
		Source    sql.NullString
		ExpiresAt sql.NullTime
	}
	// the order here should be the same as in the `session.Columns`.
	if err := rows.Scan(
		&scans.ID,
		&scans.CreatedAt,
		&scans.UpdatedAt,
		&scans.SessionID,
		&scans.UserID,
		&scans.Source,
		&scans.ExpiresAt,
	); err != nil {
		return err
	}
	s.ID = scans.ID
	s.CreatedAt = scans.CreatedAt.Time
	s.UpdatedAt = scans.UpdatedAt.Time
	s.SessionID = scans.SessionID.String
	s.UserID = scans.UserID.String
	s.Source = session.Source(scans.Source.String)
	s.ExpiresAt = scans.ExpiresAt.Time
	return nil
}

// Update returns a builder for updating this Session.
// Note that, you need to call Session.Unwrap() before calling this method, if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return (&SessionClient{s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", session_id=")
	builder.WriteString(s.SessionID)
	builder.WriteString(", user_id=")
	builder.WriteString(s.UserID)
	builder.WriteString(", source=")
	builder.WriteString(fmt.Sprintf("%v", s.Source))
	builder.WriteString(", expires_at=")
	builder.WriteString(s.ExpiresAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session

// FromRows scans the sql response data into Sessions.
func (s *Sessions) FromRows(rows *sql.Rows) error {
	for rows.Next() {
		scans := &Session{}
		if err := scans.FromRows(rows); err != nil {
			return err
		}
		*s = append(*s, scans)
	}
	return nil
}

func (s Sessions) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
