// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/roleypoly/db/ent/predicate"
	"github.com/roleypoly/db/ent/session"
)

// SessionUpdate is the builder for updating Session entities.
type SessionUpdate struct {
	config

	updated_at *time.Time

	source     *session.Source
	expires_at *time.Time
	predicates []predicate.Session
}

// Where adds a new predicate for the builder.
func (su *SessionUpdate) Where(ps ...predicate.Session) *SessionUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetUpdatedAt sets the updated_at field.
func (su *SessionUpdate) SetUpdatedAt(t time.Time) *SessionUpdate {
	su.updated_at = &t
	return su
}

// SetSource sets the source field.
func (su *SessionUpdate) SetSource(s session.Source) *SessionUpdate {
	su.source = &s
	return su
}

// SetExpiresAt sets the expires_at field.
func (su *SessionUpdate) SetExpiresAt(t time.Time) *SessionUpdate {
	su.expires_at = &t
	return su
}

// SetNillableExpiresAt sets the expires_at field if the given value is not nil.
func (su *SessionUpdate) SetNillableExpiresAt(t *time.Time) *SessionUpdate {
	if t != nil {
		su.SetExpiresAt(*t)
	}
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SessionUpdate) Save(ctx context.Context) (int, error) {
	if su.updated_at == nil {
		v := session.UpdateDefaultUpdatedAt()
		su.updated_at = &v
	}
	if su.source != nil {
		if err := session.SourceValidator(*su.source); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"source\": %v", err)
		}
	}
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SessionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SessionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SessionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SessionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	var (
		builder  = sql.Dialect(su.driver.Dialect())
		selector = builder.Select(session.FieldID).From(builder.Table(session.Table))
	)
	for _, p := range su.predicates {
		p(selector)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = su.driver.Query(ctx, query, args, rows); err != nil {
		return 0, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		if err := rows.Scan(&id); err != nil {
			return 0, fmt.Errorf("ent: failed reading id: %v", err)
		}
		ids = append(ids, id)
	}
	if len(ids) == 0 {
		return 0, nil
	}

	tx, err := su.driver.Tx(ctx)
	if err != nil {
		return 0, err
	}
	var (
		res     sql.Result
		updater = builder.Update(session.Table)
	)
	updater = updater.Where(sql.InInts(session.FieldID, ids...))
	if value := su.updated_at; value != nil {
		updater.Set(session.FieldUpdatedAt, *value)
	}
	if value := su.source; value != nil {
		updater.Set(session.FieldSource, *value)
	}
	if value := su.expires_at; value != nil {
		updater.Set(session.FieldExpiresAt, *value)
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return 0, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return 0, err
	}
	return len(ids), nil
}

// SessionUpdateOne is the builder for updating a single Session entity.
type SessionUpdateOne struct {
	config
	id int

	updated_at *time.Time

	source     *session.Source
	expires_at *time.Time
}

// SetUpdatedAt sets the updated_at field.
func (suo *SessionUpdateOne) SetUpdatedAt(t time.Time) *SessionUpdateOne {
	suo.updated_at = &t
	return suo
}

// SetSource sets the source field.
func (suo *SessionUpdateOne) SetSource(s session.Source) *SessionUpdateOne {
	suo.source = &s
	return suo
}

// SetExpiresAt sets the expires_at field.
func (suo *SessionUpdateOne) SetExpiresAt(t time.Time) *SessionUpdateOne {
	suo.expires_at = &t
	return suo
}

// SetNillableExpiresAt sets the expires_at field if the given value is not nil.
func (suo *SessionUpdateOne) SetNillableExpiresAt(t *time.Time) *SessionUpdateOne {
	if t != nil {
		suo.SetExpiresAt(*t)
	}
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *SessionUpdateOne) Save(ctx context.Context) (*Session, error) {
	if suo.updated_at == nil {
		v := session.UpdateDefaultUpdatedAt()
		suo.updated_at = &v
	}
	if suo.source != nil {
		if err := session.SourceValidator(*suo.source); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"source\": %v", err)
		}
	}
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SessionUpdateOne) SaveX(ctx context.Context) *Session {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SessionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SessionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SessionUpdateOne) sqlSave(ctx context.Context) (s *Session, err error) {
	var (
		builder  = sql.Dialect(suo.driver.Dialect())
		selector = builder.Select(session.Columns...).From(builder.Table(session.Table))
	)
	session.ID(suo.id)(selector)
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err = suo.driver.Query(ctx, query, args, rows); err != nil {
		return nil, err
	}
	defer rows.Close()

	var ids []int
	for rows.Next() {
		var id int
		s = &Session{config: suo.config}
		if err := s.FromRows(rows); err != nil {
			return nil, fmt.Errorf("ent: failed scanning row into Session: %v", err)
		}
		id = s.ID
		ids = append(ids, id)
	}
	switch n := len(ids); {
	case n == 0:
		return nil, &ErrNotFound{fmt.Sprintf("Session with id: %v", suo.id)}
	case n > 1:
		return nil, fmt.Errorf("ent: more than one Session with the same id: %v", suo.id)
	}

	tx, err := suo.driver.Tx(ctx)
	if err != nil {
		return nil, err
	}
	var (
		res     sql.Result
		updater = builder.Update(session.Table)
	)
	updater = updater.Where(sql.InInts(session.FieldID, ids...))
	if value := suo.updated_at; value != nil {
		updater.Set(session.FieldUpdatedAt, *value)
		s.UpdatedAt = *value
	}
	if value := suo.source; value != nil {
		updater.Set(session.FieldSource, *value)
		s.Source = *value
	}
	if value := suo.expires_at; value != nil {
		updater.Set(session.FieldExpiresAt, *value)
		s.ExpiresAt = *value
	}
	if !updater.Empty() {
		query, args := updater.Query()
		if err := tx.Exec(ctx, query, args, &res); err != nil {
			return nil, rollback(tx, err)
		}
	}
	if err = tx.Commit(); err != nil {
		return nil, err
	}
	return s, nil
}
